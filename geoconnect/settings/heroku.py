"""Production settings and globals."""

from __future__ import absolute_import
import os
from os.path import join, normpath, isdir, isfile
import json
import sys

from .base import *


SITENAME = "geoconnect"

SITEURL = "http://geoconnect.datascience.iq.harvard.edu"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
#
STATIC_ROOT = join(SITE_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
#
STATICFILES_DIRS = (
    join(SITE_ROOT, 'static'),
)

STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'

#MEDIA_ROOT = '/var/www/geoconnect/media/'   #' join(GEOCONNECT_FILES_DIR, 'media' )

########## URL CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf
#ROOT_URLCONF = '%s.urls' % SITE_NAME
ROOT_URLCONF = '%s.urls_prod' % SITE_NAME

########## END URL CONFIGURATION

#ALLOWED_HOSTS = ['54.68.229.158']
ALLOWED_HOSTS = os.environ['ALLOWED_HOSTS']


ADMINS = os.environ['ADMINS']
########## DEBUG CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#debug
DEBUG = False
#DEBUG = True


########## EMAIL CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#email-backend
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# See: https://docs.djangoproject.com/en/dev/ref/settings/#email-host
EMAIL_HOST = os.environ['EMAIL_HOST']

# See: https://docs.djangoproject.com/en/dev/ref/settings/#email-host-user
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']

# See: https://docs.djangoproject.com/en/dev/ref/settings/#email-host-password
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']

# See: https://docs.djangoproject.com/en/dev/ref/settings/#email-port
EMAIL_PORT = os.environ['EMAIL_PORT']
#environ.get('EMAIL_PORT', 587)

# See: https://docs.djangoproject.com/en/dev/ref/settings/#email-subject-prefix
EMAIL_SUBJECT_PREFIX = '[%s] ' % SITE_NAME

# See: https://docs.djangoproject.com/en/dev/ref/settings/#email-use-tls
EMAIL_USE_TLS = True

# See: https://docs.djangoproject.com/en/dev/ref/settings/#server-email
SERVER_EMAIL = EMAIL_HOST_USER
########## END EMAIL CONFIGURATION


########## DATABASE CONFIGURATION
DATABASES = {
    'default': {
        'ENGINE': os.environ['DB_SETTING_ENGINE'],
        'NAME': os.environ['DB_SETTING_NAME'],
        'USER': os.environ['DB_SETTING_USER'],
        'PASSWORD': os.environ['DB_SETTING_PASSWORD'],
        'HOST': os.environ['DB_SETTING_HOST'],
        'PORT': os.environ['DB_SETTING_PORT'],
    },

}
########## END DATABASE CONFIGURATION


########## CACHE CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#caches
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}
########## END CACHE CONFIGURATION

########## TOOLBAR CONFIGURATION
# See: http://django-debug-toolbar.readthedocs.org/en/latest/installation.html#explicit-setup
INSTALLED_APPS += (
    #'debug_toolbar',
    #'djcelery',
    #'kombu.transport.django',
)

# Set Template debug to False
try:
    TEMPLATES[0]['OPTIONS']['debug'] = False
except:
    assert False, """Make sure TEMPLATES list is set with 1 entry that has an OPTIONS dict.
e.g. TEMPLATES = [ { 'OPTIONS' : { 'debug' : False }}]"""

#MIDDLEWARE_CLASSES += (
#   'debug_toolbar.middleware.DebugToolbarMiddleware',
#)
#

########## SECRET CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#secret-key
SECRET_KEY = os.environ['SECRET_KEY']
########## END SECRET CONFIGURATION

#DEBUG_TOOLBAR_PATCH_SETTINGS = False

# http://django-debug-toolbar.readthedocs.org/en/latest/installation.html
#INTERNAL_IPS = ('127.0.0.1',)
########## END TOOLBAR CONFIGURATION

########## SESSION_COOKIE_NAME
SESSION_COOKIE_NAME = 'geoconnect_prod'
########## END SESSION_COOKIE_NAME

########## LOGIN_URL
# To use with decorator @login_required
LOGIN_URL = "admin:index"
########## END LOGIN_URL


########## DATAVERSE_SERVER_URL
# Used to make API calls
# e.g.  http://dvn-build.hmdc.harvard.edu/
#
DATAVERSE_SERVER_URL = os.environ['DATAVERSE_SERVER_URL']
DATAVERSE_METADATA_UPDATE_API_PATH =  '/api/worldmap/update-layer-metadata/'
########## DATAVERSE_SERVER_URL

########### DIRECTORY TO STORE DATA FILES COPIES FROM DV
# Do NOT make this directory accessible to a browser
#
DV_DATAFILE_DIRECTORY = None    # use S3

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Credentials from Heroku, generated by Bucketeer
#
AWS_ACCESS_KEY_ID = os.environ['BUCKETEER_AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = os.environ['BUCKETEER_AWS_SECRET_ACCESS_KEY']
AWS_STORAGE_BUCKET_NAME = os.environ['BUCKETEER_BUCKET_NAME']


########## GISFILE_SCRATCH_WORK_DIRECTORY
# Used for opening up files for processing, etc
GISFILE_SCRATCH_WORK_DIRECTORY = '/tmp'
########## END GISFILE_SCRATCH_WORK_DIRECTORY

########## WORLDMAP TOKEN/SERVER | DATAVERSE TOKEN AND SERVER
#

# RETRIEVE WORLDMAP INFO
WORLDMAP_SERVER_URL = os.environ['WORLDMAP_SERVER_URL']
WORLDMAP_ACCOUNT_USERNAME = os.environ['WORLDMAP_ACCOUNT_USERNAME']
WORLDMAP_ACCOUNT_PASSWORD = os.environ['WORLDMAP_ACCOUNT_PASSWORD']
WORLDMAP_ACCOUNT_AUTH = (WORLDMAP_ACCOUNT_USERNAME, WORLDMAP_ACCOUNT_PASSWORD)

########## END WORLDMAP TOKEN/SERVER | DATAVERSE TOKEN AND SERVER

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

########## LOGGING

xLOGGING = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': join(GEOCONNECT_LOGS_DIR, 'geolog.log'),
            'formatter': 'verbose'
            },
        },
    'loggers': {

        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,
            },
        },
        'geoconnect': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'gc_apps': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
            },
    }
